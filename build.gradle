// TIP use -PpublishRelease=true to active release behavior regardless of the version
status = project.hasProperty('publishRelease') && project.publishRelease.toBoolean() ?
    'release' : ((version == 'unspecified' || version.endsWith('-SNAPSHOT')) ? 'snapshot' : 'release')

ext {
  buildDateTime = new Date()
  (buildDateOnly, buildTimeOnly) = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSSZ').format(buildDateTime).split(' ')
  statusIsRelease = (status == 'release')

  // jar versions
  asciidoctorJVersion = '1.6.0-SNAPSHOT'
  arquillianVersion = '1.1.8.Final'
  arquillianSpockVersion = '1.0.0.Beta3'
  groovyVersion = '2.3.9'
  guavaVersion = '18.0'
  hamcrestVersion = '1.3'
  jcommanderVersion = '1.35'
  jrubyVersion = '1.7.20'
  jsoupVersion = '1.8.1'
  junitVersion = '4.12'
  nettyVersion = '4.0.28.Final'
  saxonVersion = '9.5.1-6'
  spockVersion = '0.7-groovy-2.0'
  xmlMatchersVersion = '1.0-RC1'

  // gem versions
}

allprojects {
  group = 'org.asciidoctor'
}

subprojects {
  // NOTE applying Java plugin changes the status; take steps to preserve value
  def _status = status
  apply plugin: 'java'
  apply plugin: 'groovy'
  status = _status

  // NOTE sourceCompatibility & targetCompatibility are set in gradle.properties to meet requirements of Gradle
  // Must redefine here to work around a bug in the Eclipse plugin
  sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_7

  repositories {
    if (project.hasProperty('useMavenLocal') && project.useMavenLocal.toBoolean()) {
      mavenLocal()
    }
    maven {
      url 'http://oss.jfrog.org/oss-snapshot-local/'
    }
    jcenter()
  }

  dependencies {
    compile "org.asciidoctor:asciidoctorj:$asciidoctorJVersion"
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testCompile("org.spockframework:spock-core:$spockVersion") {
      exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testCompile "org.jboss.arquillian.junit:arquillian-junit-container:$arquillianVersion"
    testCompile "org.jboss.arquillian.spock:arquillian-spock-container:$arquillianSpockVersion"
  }

  apply plugin: 'codenarc'
  codenarc {
    configFile = rootProject.file('config/codenarc/codenarc.groovy')
  }

  test {
    forkEvery = 10
    minHeapSize = '128m'
    maxHeapSize = '1024m'
    if (JavaVersion.current().isJava8Compatible()) {
      jvmArgs '-XX:-UseGCOverheadLimit'
    }
    else {
      jvmArgs '-XX:MaxPermSize=256m', '-XX:-UseGCOverheadLimit'
    }

    systemProperty 'https.proxyHost', 'proxy'
    systemProperty 'https.proxyPort', '81'

    testLogging {
      // events 'passed', 'failed', 'skipped', 'standard_out', 'standard_error'
      // events 'standard_out', 'standard_error'
      afterSuite { desc, result ->
        if (!desc.parent && logger.infoEnabled) {
          logger.info "Test results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        }
      }
    }
  }

  if (JavaVersion.current().isJava8Compatible()) {
    javadoc {
      // Oracle JDK8 likes to fail the build over spoiled HTML
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }

}